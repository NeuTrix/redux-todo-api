#!/usr/bin/env node
// +++++++++ https- secure server  +++++++++ 

var app = require('../app');
var debug = require('debug')('testapi:server');
// +++++++++ ??? +++++++++ 
// var express = require('express');
var fs = require('fs');
// var http = require('http'); // assuming this will be turned off
var https = require('https');
var path = require('path');
var key = fs.readFileSync(path.resolve('./key.pem'));
var cert = fs.readFileSync(path.resolve('./cert.pem'));
var https_options = {
  key: key,
  cert: cert
};

// +++++++++ Get PORT from environment and store in Express:
var PORT = normalizePort(process.env.PORT || '3003');
app.set('PORT', PORT);

var HOST = 'localhost';

// +++++++++ ??? secure server +++++++++ 
/*app.configure(function(){
  app.use(app.router);
})*/

// +++++++++ Create HTTP server
// var server = http.createServer(app);
var server = https.createServer(https_options, app)

/**
 * Listen on provided PORT, on all network interfaces.
 */

server.listen(PORT);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a PORT into a number, string, or false.
 */

function normalizePort(val) {
  var PORT = parseInt(val, 10);

  if (isNaN(PORT)) {
    // named pipe
    return val;
  }

  if (PORT >= 0) {
    // PORT number
    return PORT;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof PORT === 'string'
    ? 'Pipe ' + PORT
    : 'Port ' + PORT;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  console.log('starting server on PORT : ', PORT)
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'PORT ' + addr.PORT;
  debug('Listening on ' + bind);
}
